name: "songs-microservice CI/CD"

on:
  push:
    paths:
      - "microservices/songs-microservice/**"
      - ".github/workflows/songs-microservice.yml"
      - "workflows.sh"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
      - name: Cache build folder
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Finish
        run: echo "Finish testing"
        shell: bash

  publish:
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Use cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./microservices/songs-microservice
          file: ./microservices/songs-microservice/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/songs-microservice:latest

  deploy:
    needs: [ test, publish ]
    runs-on: ubuntu-latest
    steps:
      - name: Finish
        run: echo "Finish deploying"
        shell: bash

  snyk-docker-images:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKER_USERNAME }}/songs-microservice:latest
          args: --fileS./microservices/songs-microservice/Dockerfile
            --severity-threshold=high
            --run-quality-checks=true
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  snyk-static-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
            --severity-threshold=high
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
